// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: dni.proto

package dnipb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dni_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_dni_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_dni_proto_rawDescGZIP(), []int{0}
}

type GeneralReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GeneralReply) Reset() {
	*x = GeneralReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dni_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReply) ProtoMessage() {}

func (x *GeneralReply) ProtoReflect() protoreflect.Message {
	mi := &file_dni_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReply.ProtoReflect.Descriptor instead.
func (*GeneralReply) Descriptor() ([]byte, []int) {
	return file_dni_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GeneralReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type GraphReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (x *GraphReq) Reset() {
	*x = GraphReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dni_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphReq) ProtoMessage() {}

func (x *GraphReq) ProtoReflect() protoreflect.Message {
	mi := &file_dni_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphReq.ProtoReflect.Descriptor instead.
func (*GraphReq) Descriptor() ([]byte, []int) {
	return file_dni_proto_rawDescGZIP(), []int{2}
}

func (x *GraphReq) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

var File_dni_proto protoreflect.FileDescriptor

var file_dni_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x6e, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x64, 0x6e, 0x69,
	0x70, 0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0x0a, 0x0c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a,
	0x08, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0xdd, 0x01, 0x0a, 0x03, 0x44, 0x4e, 0x49, 0x12, 0x32, 0x0a, 0x08, 0x52,
	0x75, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0f, 0x2e, 0x64, 0x6e, 0x69, 0x70, 0x62, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6e, 0x69, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x34, 0x0a, 0x0a, 0x50, 0x61, 0x75, 0x73, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0f, 0x2e,
	0x64, 0x6e, 0x69, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x64, 0x6e, 0x69, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x0a, 0x52, 0x65, 0x72, 0x75, 0x6e, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x0f, 0x2e, 0x64, 0x6e, 0x69, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6e, 0x69, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x44,
	0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x0f, 0x2e, 0x64, 0x6e,
	0x69, 0x70, 0x62, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64,
	0x6e, 0x69, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x64, 0x6e, 0x69, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dni_proto_rawDescOnce sync.Once
	file_dni_proto_rawDescData = file_dni_proto_rawDesc
)

func file_dni_proto_rawDescGZIP() []byte {
	file_dni_proto_rawDescOnce.Do(func() {
		file_dni_proto_rawDescData = protoimpl.X.CompressGZIP(file_dni_proto_rawDescData)
	})
	return file_dni_proto_rawDescData
}

var file_dni_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_dni_proto_goTypes = []interface{}{
	(*Empty)(nil),        // 0: dnipb.Empty
	(*GeneralReply)(nil), // 1: dnipb.GeneralReply
	(*GraphReq)(nil),     // 2: dnipb.GraphReq
}
var file_dni_proto_depIdxs = []int32{
	2, // 0: dnipb.DNI.RunGraph:input_type -> dnipb.GraphReq
	2, // 1: dnipb.DNI.PauseGraph:input_type -> dnipb.GraphReq
	2, // 2: dnipb.DNI.RerunGraph:input_type -> dnipb.GraphReq
	2, // 3: dnipb.DNI.DestroyGraph:input_type -> dnipb.GraphReq
	1, // 4: dnipb.DNI.RunGraph:output_type -> dnipb.GeneralReply
	1, // 5: dnipb.DNI.PauseGraph:output_type -> dnipb.GeneralReply
	1, // 6: dnipb.DNI.RerunGraph:output_type -> dnipb.GeneralReply
	1, // 7: dnipb.DNI.DestroyGraph:output_type -> dnipb.GeneralReply
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_dni_proto_init() }
func file_dni_proto_init() {
	if File_dni_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dni_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dni_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dni_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dni_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dni_proto_goTypes,
		DependencyIndexes: file_dni_proto_depIdxs,
		MessageInfos:      file_dni_proto_msgTypes,
	}.Build()
	File_dni_proto = out.File
	file_dni_proto_rawDesc = nil
	file_dni_proto_goTypes = nil
	file_dni_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DNIClient is the client API for DNI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DNIClient interface {
	RunGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error)
	PauseGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error)
	RerunGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error)
	DestroyGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error)
}

type dNIClient struct {
	cc grpc.ClientConnInterface
}

func NewDNIClient(cc grpc.ClientConnInterface) DNIClient {
	return &dNIClient{cc}
}

func (c *dNIClient) RunGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/dnipb.DNI/RunGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNIClient) PauseGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/dnipb.DNI/PauseGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNIClient) RerunGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/dnipb.DNI/RerunGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dNIClient) DestroyGraph(ctx context.Context, in *GraphReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/dnipb.DNI/DestroyGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DNIServer is the server API for DNI service.
type DNIServer interface {
	RunGraph(context.Context, *GraphReq) (*GeneralReply, error)
	PauseGraph(context.Context, *GraphReq) (*GeneralReply, error)
	RerunGraph(context.Context, *GraphReq) (*GeneralReply, error)
	DestroyGraph(context.Context, *GraphReq) (*GeneralReply, error)
}

// UnimplementedDNIServer can be embedded to have forward compatible implementations.
type UnimplementedDNIServer struct {
}

func (*UnimplementedDNIServer) RunGraph(context.Context, *GraphReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunGraph not implemented")
}
func (*UnimplementedDNIServer) PauseGraph(context.Context, *GraphReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseGraph not implemented")
}
func (*UnimplementedDNIServer) RerunGraph(context.Context, *GraphReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RerunGraph not implemented")
}
func (*UnimplementedDNIServer) DestroyGraph(context.Context, *GraphReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyGraph not implemented")
}

func RegisterDNIServer(s *grpc.Server, srv DNIServer) {
	s.RegisterService(&_DNI_serviceDesc, srv)
}

func _DNI_RunGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNIServer).RunGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnipb.DNI/RunGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNIServer).RunGraph(ctx, req.(*GraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNI_PauseGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNIServer).PauseGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnipb.DNI/PauseGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNIServer).PauseGraph(ctx, req.(*GraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNI_RerunGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNIServer).RerunGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnipb.DNI/RerunGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNIServer).RerunGraph(ctx, req.(*GraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DNI_DestroyGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DNIServer).DestroyGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dnipb.DNI/DestroyGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DNIServer).DestroyGraph(ctx, req.(*GraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DNI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dnipb.DNI",
	HandlerType: (*DNIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunGraph",
			Handler:    _DNI_RunGraph_Handler,
		},
		{
			MethodName: "PauseGraph",
			Handler:    _DNI_PauseGraph_Handler,
		},
		{
			MethodName: "RerunGraph",
			Handler:    _DNI_RerunGraph_Handler,
		},
		{
			MethodName: "DestroyGraph",
			Handler:    _DNI_DestroyGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dni.proto",
}
