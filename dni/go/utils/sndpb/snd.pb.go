// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: snd.proto

package sndpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{0}
}

type GeneralReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GeneralReply) Reset() {
	*x = GeneralReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralReply) ProtoMessage() {}

func (x *GeneralReply) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralReply.ProtoReflect.Descriptor instead.
func (*GeneralReply) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{1}
}

func (x *GeneralReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *GeneralReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SNDSNReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeployEnv string `protobuf:"bytes,1,opt,name=deployEnv,proto3" json:"deployEnv,omitempty"`
	Loglevels []byte `protobuf:"bytes,2,opt,name=loglevels,proto3" json:"loglevels,omitempty"`
}

func (x *SNDSNReq) Reset() {
	*x = SNDSNReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SNDSNReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SNDSNReq) ProtoMessage() {}

func (x *SNDSNReq) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SNDSNReq.ProtoReflect.Descriptor instead.
func (*SNDSNReq) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{2}
}

func (x *SNDSNReq) GetDeployEnv() string {
	if x != nil {
		return x.DeployEnv
	}
	return ""
}

func (x *SNDSNReq) GetLoglevels() []byte {
	if x != nil {
		return x.Loglevels
	}
	return nil
}

type NetifsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Format    string `protobuf:"bytes,1,opt,name=format,proto3" json:"format,omitempty"`
	Protected []byte `protobuf:"bytes,2,opt,name=protected,proto3" json:"protected,omitempty"`
	Manage    []byte `protobuf:"bytes,3,opt,name=manage,proto3" json:"manage,omitempty"`
}

func (x *NetifsReq) Reset() {
	*x = NetifsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetifsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetifsReq) ProtoMessage() {}

func (x *NetifsReq) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetifsReq.ProtoReflect.Descriptor instead.
func (*NetifsReq) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{3}
}

func (x *NetifsReq) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *NetifsReq) GetProtected() []byte {
	if x != nil {
		return x.Protected
	}
	return nil
}

func (x *NetifsReq) GetManage() []byte {
	if x != nil {
		return x.Manage
	}
	return nil
}

type DirectReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OnlyIngress bool `protobuf:"varint,1,opt,name=onlyIngress,proto3" json:"onlyIngress,omitempty"`
}

func (x *DirectReq) Reset() {
	*x = DirectReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DirectReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectReq) ProtoMessage() {}

func (x *DirectReq) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectReq.ProtoReflect.Descriptor instead.
func (*DirectReq) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{4}
}

func (x *DirectReq) GetOnlyIngress() bool {
	if x != nil {
		return x.OnlyIngress
	}
	return false
}

type PcapRemoteUrlReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteUrl string `protobuf:"bytes,1,opt,name=remoteUrl,proto3" json:"remoteUrl,omitempty"`
}

func (x *PcapRemoteUrlReq) Reset() {
	*x = PcapRemoteUrlReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcapRemoteUrlReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcapRemoteUrlReq) ProtoMessage() {}

func (x *PcapRemoteUrlReq) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcapRemoteUrlReq.ProtoReflect.Descriptor instead.
func (*PcapRemoteUrlReq) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{5}
}

func (x *PcapRemoteUrlReq) GetRemoteUrl() string {
	if x != nil {
		return x.RemoteUrl
	}
	return ""
}

type DatabaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DatabaseReq) Reset() {
	*x = DatabaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseReq) ProtoMessage() {}

func (x *DatabaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseReq.ProtoReflect.Descriptor instead.
func (*DatabaseReq) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{6}
}

func (x *DatabaseReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type HostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *HostReq) Reset() {
	*x = HostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostReq) ProtoMessage() {}

func (x *HostReq) ProtoReflect() protoreflect.Message {
	mi := &file_snd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostReq.ProtoReflect.Descriptor instead.
func (*HostReq) Descriptor() ([]byte, []int) {
	return file_snd_proto_rawDescGZIP(), []int{7}
}

func (x *HostReq) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

var File_snd_proto protoreflect.FileDescriptor

var file_snd_proto_rawDesc = []byte{
	0x0a, 0x09, 0x73, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6e, 0x64,
	0x70, 0x62, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x40, 0x0a, 0x0c, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x46, 0x0a,
	0x08, 0x53, 0x4e, 0x44, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x45, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x45, 0x6e, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x59, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x69, 0x66, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x22, 0x2d, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a,
	0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x30, 0x0a, 0x10, 0x50, 0x63, 0x61, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72,
	0x6c, 0x22, 0x1f, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x22, 0x19, 0x0a, 0x07, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x32, 0xf1, 0x04,
	0x0a, 0x06, 0x53, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67,
	0x12, 0x0c, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13,
	0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x45, 0x6e, 0x76, 0x12, 0x0f, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x4e,
	0x44, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a,
	0x0c, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12, 0x0f, 0x2e,
	0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x53, 0x4e, 0x44, 0x53, 0x4e, 0x52, 0x65, 0x71, 0x1a, 0x13,
	0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x69,
	0x66, 0x73, 0x12, 0x10, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x74, 0x69, 0x66,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x2e,
	0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x50, 0x63, 0x61,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x2e, 0x73, 0x6e, 0x64,
	0x70, 0x62, 0x2e, 0x50, 0x63, 0x61, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x12, 0x2e, 0x73,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x48, 0x6f,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c,
	0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x73,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x53, 0x68,
	0x6f, 0x77, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x73,
	0x6e, 0x64, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x73, 0x6e, 0x64,
	0x70, 0x62, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6e, 0x64, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snd_proto_rawDescOnce sync.Once
	file_snd_proto_rawDescData = file_snd_proto_rawDesc
)

func file_snd_proto_rawDescGZIP() []byte {
	file_snd_proto_rawDescOnce.Do(func() {
		file_snd_proto_rawDescData = protoimpl.X.CompressGZIP(file_snd_proto_rawDescData)
	})
	return file_snd_proto_rawDescData
}

var file_snd_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_snd_proto_goTypes = []interface{}{
	(*Empty)(nil),            // 0: sndpb.Empty
	(*GeneralReply)(nil),     // 1: sndpb.GeneralReply
	(*SNDSNReq)(nil),         // 2: sndpb.SNDSNReq
	(*NetifsReq)(nil),        // 3: sndpb.NetifsReq
	(*DirectReq)(nil),        // 4: sndpb.DirectReq
	(*PcapRemoteUrlReq)(nil), // 5: sndpb.PcapRemoteUrlReq
	(*DatabaseReq)(nil),      // 6: sndpb.DatabaseReq
	(*HostReq)(nil),          // 7: sndpb.HostReq
}
var file_snd_proto_depIdxs = []int32{
	0,  // 0: sndpb.Snding.Ping:input_type -> sndpb.Empty
	2,  // 1: sndpb.Snding.SetDeployEnv:input_type -> sndpb.SNDSNReq
	2,  // 2: sndpb.Snding.SetLogLevels:input_type -> sndpb.SNDSNReq
	3,  // 3: sndpb.Snding.SetNetifs:input_type -> sndpb.NetifsReq
	4,  // 4: sndpb.Snding.SetOnlyIngress:input_type -> sndpb.DirectReq
	5,  // 5: sndpb.Snding.SetPcapRemoteUrl:input_type -> sndpb.PcapRemoteUrlReq
	6,  // 6: sndpb.Snding.SetDatabaseUrl:input_type -> sndpb.DatabaseReq
	7,  // 7: sndpb.Snding.SetHostID:input_type -> sndpb.HostReq
	0,  // 8: sndpb.Snding.StartCollection:input_type -> sndpb.Empty
	0,  // 9: sndpb.Snding.StopCollection:input_type -> sndpb.Empty
	0,  // 10: sndpb.Snding.ShowCollection:input_type -> sndpb.Empty
	1,  // 11: sndpb.Snding.Ping:output_type -> sndpb.GeneralReply
	1,  // 12: sndpb.Snding.SetDeployEnv:output_type -> sndpb.GeneralReply
	1,  // 13: sndpb.Snding.SetLogLevels:output_type -> sndpb.GeneralReply
	1,  // 14: sndpb.Snding.SetNetifs:output_type -> sndpb.GeneralReply
	1,  // 15: sndpb.Snding.SetOnlyIngress:output_type -> sndpb.GeneralReply
	1,  // 16: sndpb.Snding.SetPcapRemoteUrl:output_type -> sndpb.GeneralReply
	1,  // 17: sndpb.Snding.SetDatabaseUrl:output_type -> sndpb.GeneralReply
	1,  // 18: sndpb.Snding.SetHostID:output_type -> sndpb.GeneralReply
	1,  // 19: sndpb.Snding.StartCollection:output_type -> sndpb.GeneralReply
	1,  // 20: sndpb.Snding.StopCollection:output_type -> sndpb.GeneralReply
	1,  // 21: sndpb.Snding.ShowCollection:output_type -> sndpb.GeneralReply
	11, // [11:22] is the sub-list for method output_type
	0,  // [0:11] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_snd_proto_init() }
func file_snd_proto_init() {
	if File_snd_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SNDSNReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetifsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DirectReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcapRemoteUrlReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snd_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snd_proto_goTypes,
		DependencyIndexes: file_snd_proto_depIdxs,
		MessageInfos:      file_snd_proto_msgTypes,
	}.Build()
	File_snd_proto = out.File
	file_snd_proto_rawDesc = nil
	file_snd_proto_goTypes = nil
	file_snd_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SndingClient is the client API for Snding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SndingClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error)
	SetDeployEnv(ctx context.Context, in *SNDSNReq, opts ...grpc.CallOption) (*GeneralReply, error)
	SetLogLevels(ctx context.Context, in *SNDSNReq, opts ...grpc.CallOption) (*GeneralReply, error)
	SetNetifs(ctx context.Context, in *NetifsReq, opts ...grpc.CallOption) (*GeneralReply, error)
	SetOnlyIngress(ctx context.Context, in *DirectReq, opts ...grpc.CallOption) (*GeneralReply, error)
	SetPcapRemoteUrl(ctx context.Context, in *PcapRemoteUrlReq, opts ...grpc.CallOption) (*GeneralReply, error)
	SetDatabaseUrl(ctx context.Context, in *DatabaseReq, opts ...grpc.CallOption) (*GeneralReply, error)
	SetHostID(ctx context.Context, in *HostReq, opts ...grpc.CallOption) (*GeneralReply, error)
	StartCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error)
	StopCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error)
	ShowCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error)
}

type sndingClient struct {
	cc grpc.ClientConnInterface
}

func NewSndingClient(cc grpc.ClientConnInterface) SndingClient {
	return &sndingClient{cc}
}

func (c *sndingClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetDeployEnv(ctx context.Context, in *SNDSNReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetDeployEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetLogLevels(ctx context.Context, in *SNDSNReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetLogLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetNetifs(ctx context.Context, in *NetifsReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetNetifs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetOnlyIngress(ctx context.Context, in *DirectReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetOnlyIngress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetPcapRemoteUrl(ctx context.Context, in *PcapRemoteUrlReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetPcapRemoteUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetDatabaseUrl(ctx context.Context, in *DatabaseReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetDatabaseUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) SetHostID(ctx context.Context, in *HostReq, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/SetHostID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) StartCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/StartCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) StopCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/StopCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sndingClient) ShowCollection(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, "/sndpb.Snding/ShowCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SndingServer is the server API for Snding service.
type SndingServer interface {
	Ping(context.Context, *Empty) (*GeneralReply, error)
	SetDeployEnv(context.Context, *SNDSNReq) (*GeneralReply, error)
	SetLogLevels(context.Context, *SNDSNReq) (*GeneralReply, error)
	SetNetifs(context.Context, *NetifsReq) (*GeneralReply, error)
	SetOnlyIngress(context.Context, *DirectReq) (*GeneralReply, error)
	SetPcapRemoteUrl(context.Context, *PcapRemoteUrlReq) (*GeneralReply, error)
	SetDatabaseUrl(context.Context, *DatabaseReq) (*GeneralReply, error)
	SetHostID(context.Context, *HostReq) (*GeneralReply, error)
	StartCollection(context.Context, *Empty) (*GeneralReply, error)
	StopCollection(context.Context, *Empty) (*GeneralReply, error)
	ShowCollection(context.Context, *Empty) (*GeneralReply, error)
}

// UnimplementedSndingServer can be embedded to have forward compatible implementations.
type UnimplementedSndingServer struct {
}

func (*UnimplementedSndingServer) Ping(context.Context, *Empty) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedSndingServer) SetDeployEnv(context.Context, *SNDSNReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeployEnv not implemented")
}
func (*UnimplementedSndingServer) SetLogLevels(context.Context, *SNDSNReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevels not implemented")
}
func (*UnimplementedSndingServer) SetNetifs(context.Context, *NetifsReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNetifs not implemented")
}
func (*UnimplementedSndingServer) SetOnlyIngress(context.Context, *DirectReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnlyIngress not implemented")
}
func (*UnimplementedSndingServer) SetPcapRemoteUrl(context.Context, *PcapRemoteUrlReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPcapRemoteUrl not implemented")
}
func (*UnimplementedSndingServer) SetDatabaseUrl(context.Context, *DatabaseReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDatabaseUrl not implemented")
}
func (*UnimplementedSndingServer) SetHostID(context.Context, *HostReq) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHostID not implemented")
}
func (*UnimplementedSndingServer) StartCollection(context.Context, *Empty) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCollection not implemented")
}
func (*UnimplementedSndingServer) StopCollection(context.Context, *Empty) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCollection not implemented")
}
func (*UnimplementedSndingServer) ShowCollection(context.Context, *Empty) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollection not implemented")
}

func RegisterSndingServer(s *grpc.Server, srv SndingServer) {
	s.RegisterService(&_Snding_serviceDesc, srv)
}

func _Snding_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetDeployEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SNDSNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetDeployEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetDeployEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetDeployEnv(ctx, req.(*SNDSNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetLogLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SNDSNReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetLogLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetLogLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetLogLevels(ctx, req.(*SNDSNReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetNetifs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetifsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetNetifs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetNetifs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetNetifs(ctx, req.(*NetifsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetOnlyIngress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetOnlyIngress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetOnlyIngress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetOnlyIngress(ctx, req.(*DirectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetPcapRemoteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PcapRemoteUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetPcapRemoteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetPcapRemoteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetPcapRemoteUrl(ctx, req.(*PcapRemoteUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetDatabaseUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetDatabaseUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetDatabaseUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetDatabaseUrl(ctx, req.(*DatabaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_SetHostID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).SetHostID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/SetHostID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).SetHostID(ctx, req.(*HostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_StartCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).StartCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/StartCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).StartCollection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_StopCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).StopCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/StopCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).StopCollection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snding_ShowCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SndingServer).ShowCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sndpb.Snding/ShowCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SndingServer).ShowCollection(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snding_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sndpb.Snding",
	HandlerType: (*SndingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Snding_Ping_Handler,
		},
		{
			MethodName: "SetDeployEnv",
			Handler:    _Snding_SetDeployEnv_Handler,
		},
		{
			MethodName: "SetLogLevels",
			Handler:    _Snding_SetLogLevels_Handler,
		},
		{
			MethodName: "SetNetifs",
			Handler:    _Snding_SetNetifs_Handler,
		},
		{
			MethodName: "SetOnlyIngress",
			Handler:    _Snding_SetOnlyIngress_Handler,
		},
		{
			MethodName: "SetPcapRemoteUrl",
			Handler:    _Snding_SetPcapRemoteUrl_Handler,
		},
		{
			MethodName: "SetDatabaseUrl",
			Handler:    _Snding_SetDatabaseUrl_Handler,
		},
		{
			MethodName: "SetHostID",
			Handler:    _Snding_SetHostID_Handler,
		},
		{
			MethodName: "StartCollection",
			Handler:    _Snding_StartCollection_Handler,
		},
		{
			MethodName: "StopCollection",
			Handler:    _Snding_StopCollection_Handler,
		},
		{
			MethodName: "ShowCollection",
			Handler:    _Snding_ShowCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "snd.proto",
}
